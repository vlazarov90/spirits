<?php

namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;

class UserControllerTest extends ApiTestCase
{
    private static $user = null;
    private static $nonRegisteredUser = null;
    private static $password = null;
    private static $wrongPassword = null;

    public static function setUpBeforeClass(): void
    {
        self::$user = random_int(0, 20000).'@abv.bg';
        self::$nonRegisteredUser = random_int(0, 20000).'@gmail.bg';
        self::$password = random_int(10000, 500000)."password";
        self::$wrongPassword = random_int(10000, 500000).'wrongpassword';
    }

    public function testRegister(): void
    {
        $response = static::createClient()->request('POST', '/api/register', [ 'body' => json_encode([
            'email' => self::$user,
            'password' => self::$password
        ])]);

        $this->assertResponseStatusCodeSame(200);
        $this->assertJsonContains(['message' => 'Registered Successfully']);

        $response = static::createClient()->request('POST', '/api/register', [ 'body' => json_encode([
            'email' => self::$user,
            'password' => self::$password
        ])]);

        $this->assertResponseStatusCodeSame(400);
        $this->assertJsonContains(['message' => 'User already exists']);
    }

    public function testLogin(): void
    {
        $response = static::createClient()->request('POST', '/api/login_check', [ 'body' => json_encode(['username' => self::$nonRegisteredUser, 'password' => self::$password]), 'headers' => ['Content-Type' => 'application/json']]);

        $this->assertResponseStatusCodeSame(401);
        $this->assertJsonContains(['message' => 'Invalid credentials.']);

        $response = static::createClient()->request('POST', '/api/login_check', [ 'body' => json_encode(['username' => self::$user, 'password' => self::$wrongPassword]), 'headers' => ['Content-Type' => 'application/json']]);

        $this->assertResponseStatusCodeSame(401);
        $this->assertJsonContains(['message' => 'Invalid credentials.']);

        $response = static::createClient()->request('POST', '/api/login_check', [ 'body' => json_encode(['username' => self::$user, 'password' => self::$password]), 'headers' => ['Content-Type' => 'application/json']]);

        $this->assertResponseStatusCodeSame(200);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
